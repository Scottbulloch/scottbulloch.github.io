"use strict";(self.webpackChunksnow_site=self.webpackChunksnow_site||[]).push([[5629],{3905:(e,t,n)=>{n.d(t,{Zo:()=>X,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},X=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,X=s(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,m=c["".concat(l,".").concat(d)]||c[d]||u[d]||a;return n?o.createElement(m,i(i({ref:t},X),{},{components:n})):o.createElement(m,i({ref:t},X))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2943:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var o=n(7462),r=(n(7294),n(3905));const a={custom_edit_url:null,sidebar_position:2},i="Common Tasks",s={unversionedId:"atlas-api/samples",id:"atlas-api/samples",title:"Common Tasks",description:"Authentication",source:"@site/docs/atlas-api/samples.md",sourceDirName:"atlas-api",slug:"/atlas-api/samples",permalink:"/atlas-api/samples",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:2,frontMatter:{custom_edit_url:null,sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/atlas-api/start"},next:{title:"API Conventions",permalink:"/atlas-api/Conventions"}},l={},p=[{value:"Authentication",id:"authentication",level:2},{value:"Get and Export a list of Computers",id:"get-and-export-a-list-of-computers",level:2}],X={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,o.Z)({},X,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"common-tasks"},"Common Tasks"),(0,r.kt)("h2",{id:"authentication"},"Authentication"),(0,r.kt)("p",null,"Requirements:"),(0,r.kt)("p",null,"Powershell or Python\nApp Registration Created in Snow Atlas with the correct permmission set for the Actions that will be performed.\nAPI Data Region can be found under ",(0,r.kt)("strong",{parentName:"p"},"Snow Atlas Settings > Licence Details > General Information in the Portal.")),(0,r.kt)("p",null,"Usage:"),(0,r.kt)("p",null,"Authentication requires the App Registrations ClientID, Password and Region\nReplace the Data with the contents from your App Registration and Region"),(0,r.kt)("p",null,"Python Sample:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nimport urllib\nimport json\n\n#Connect to Atlas\nclient_id = 'XXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXX'\nclient_secret = 'XXXXXXXXXXXXXXXXXXXXXXXX' \nRegion = \"XXXXXXXX\"\n\n#Format URL\nbaseurl  = Region+\".snowsoftware.io/idp/api/connect/token?\"\nurl = \"https://\"+Region+\".snowsoftware.io/idp/api/connect/token\"\nparams = {'grant_type': 'client_credentials', 'client_id': client_id, 'client_secret': client_secret}\nfullUri = url + urllib.parse.urlencode(params)\n\n#Get_Token\nheaders = {'Content-Type': 'application/x-www-form-urlencoded'}\ndata = requests.post(url, params, headers)\njsondata = data.content\ncontent = json.loads(jsondata)\ntoken = content['access_token']\nprint(token)\n")),(0,r.kt)("p",null,"Powershell Sample:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},"#Connect to Atlas\n    $client_id = 'XXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXX'\n    $client_secret = 'XXXXXXXXXXXXXXXXXXXXXXX' \n    $Region = \"XXXXXXXXXX\"\n\n#Get Token\n    $TokenContentType = 'application/x-www-form-urlencoded' \n    $Body = @{grant_type = 'client_credentials'\n            client_id = $client_id \n            client_secret = $client_secret\n        } \n    $Tokenuri =  \"https://$Region.snowsoftware.io/idp/api/connect/token\"\n    $Tokendata = Invoke-WebRequest -Uri $Tokenuri -ContentType $TokenContentType -Method Post -Body $body\n    if($Tokendata.Statuscode -eq \"200\"){\n        Write-host \"Token Aquired\"\n        $Token = ($TokenData.Content  | ConvertFrom-Json).access_token\n    }\n\n#Print Token\n    Write-host $Token    \n")),(0,r.kt)("h2",{id:"get-and-export-a-list-of-computers"},"Get and Export a list of Computers"),(0,r.kt)("p",null,"Requirements:"),(0,r.kt)("p",null,"Powershell or PWSH\nApp Registration Created in Snow Atlas with the correct permmission set for the Actions that will be performed.\nAPI Data Region can be found under ",(0,r.kt)("strong",{parentName:"p"},"Snow Atlas Settings > Licence Details > General Information in the Portal.")),(0,r.kt)("p",null,"Usage:"),(0,r.kt)("p",null,"Authentication requires the App Registrations ClientID, Password and Region\nReplace the Data with the contents from your App Registration and Region\nSpecify the File output location."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'#Connect to Atlas\n    $client_id = \'XXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXX\'\n    $client_secret = \'XXXXXXXXXXXXXXXXXXXXXXXXX\' \n    $Region = "XXXXXXXXXXXXXXX"\n    $CSVPath  = "ComputerExport.csv"\n\n#Get Token\n    $TokenContentType = \'application/x-www-form-urlencoded\' \n    $Body = @{grant_type = \'client_credentials\'\n            client_id = $client_id \n            client_secret = $client_secret\n        } \n    $Tokenuri =  "https://$Region.snowsoftware.io/idp/api/connect/token"\n    $Tokendata = Invoke-WebRequest -Uri $Tokenuri -ContentType $TokenContentType -Method Post -Body $body\n    if($Tokendata.Statuscode -eq "200"){\n        Write-host "Token Aquired"\n        $Token = ($TokenData.Content  | ConvertFrom-Json).access_token\n    }\n\n    \n#Get Computers (Paginated)\n    $ContentType = \'application/json\' \n    $headers = @{Authorization = ("Bearer {0}" -f $Token) } \n    #Paginate Starting at Page 1\n    $Page = 1\n    $itemnumber = 1\n    $ComputerObjects = @()\n    Do{\n        $ComputersUri = "https://$Region.snowsoftware.io/api/sam/estate/v1/computers?page_size=100&page_number=$page"\n        $ComputerData = Invoke-RestMethod $ComputersUri -Method \'GET\' -Headers $headers -ContentType $ContentType\n        $Content = $ComputerData.items\n        $Count = $ComputerData.items.count \n    \n        $Content | ForEach-Object {           \n        $Comuterobject = [PSCustomObject]@{ \n            itemNumber = $itemnumber\n            domain = $_.domain\n            hostname = $_.hostName\n            id = $_.id\n            ipAddress = $_.ipAddress\n            isPortable = $_.isPortable\n            isServer = $_.isServer\n            isVDI = $_.isVDI\n            isVirtual = $_.isVirtual\n            lastScanDate = $_.lastScanDate\n            links = $_.links.href\n            manufacturer = $_.manufacturer\n            model = $_.model\n            operatingSystem = $_.operatingSystem\n            organizationId = $_.organizationId\n            status = $_.status\n        }\n        $ComputerObjects += $Comuterobject\n        $itemnumber++\n    }\n    $page++ \n    }  \n    while ($Count -ge 100) \n\n$ComputerObjects | Export-Csv -Path $CSVPath -Force\n')))}u.isMDXComponent=!0}}]);